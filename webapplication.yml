Parameters:
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String    
Resources:              
    ELBSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to ELB
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
    webappSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to app users and all outbound for updates
        VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
    WebApplicationLaunchconfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:  
            ImageId: ami-09e38cf07be65a594 
            InstanceType: t2.medium
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp  
            BlockDeviceMappings:
                - DeviceName: "/dev/sdk"
                  Ebs:
                    VolumeSize: '10' 
            SecurityGroups: 
              - Ref: webappSG
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash
                apt-get update -y
                apt-get install unzip awscli -y
                apt-get install apache2 -y
                systemctl start apache2.service
                cd /var/www/html
                aws s3 cp s3://udacity-demo-1/udacity.zip .
                unzip -o udacity.zip     
    Webapplication: 
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
        LaunchConfigurationName:
          Ref: WebApplicationLaunchconfig  
        MinSize: '4'
        MaxSize: '4'      
        TargetGroupARNs: 
         - Ref: WebApplicationTargetGroup
    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties: 
          Roles:
            - Ref: UdacityS3ReadOnlyEC2
    WebApplicationTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
             Fn::Sub: "${EnvironmentName}-VPCID"          
    LoadBalancer: 
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer   
        Properties:
         Subnets:
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        Name: 'LoadBalancer'
        SecurityGroups:
            - Ref: ELBSG
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebApplicationTargetGroup
          LoadBalancerArn:
            Ref: LoadBalancer
            Port: '80'
            Protocol: HTTP         
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebApplicationTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1
    UdacityS3ReadOnlyEC2: 
        Type: "AWS::IAM::Role"    
        Properties: 
          AssumeRolePolicyDocument:
            Version: '2012-10-17' 
            statement:
             - Effect: Allow
               Principal:
                 Service:
                 - ec2.amazonaws.com
               Action :
                 - sts:AssumeRole
          Path: "/"
          Policies:
            - PolicyName: BucketPolicy
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action: 
                      - 's3:*'
                    Resource: '*'       
Outputs:
    URL:
      Description: LoadBalancer Public URL
      Value:
         Fn::Join: [ "http//", [!GetAtt LoadBalancer.DNSName ] ]